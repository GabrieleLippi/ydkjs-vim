





<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://assets-cdn.github.com">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">



  <link crossorigin="anonymous" media="all" integrity="sha512-/yZA7MGD9acBi5MmgjnivwjGeiNsmimsI/bhLlK7akrRuw+hMxNpJoQEMO9Zt0Nq6ZRu1m1NGV6r95Ib0zx7Qw==" rel="stylesheet" href="https://assets-cdn.github.com/assets/frameworks-1ca00d32d1a8adc78ae7bb6677410eb1.css" />
  <link crossorigin="anonymous" media="all" integrity="sha512-pHF1luoMSUFxvz63bW3jEbbifYl/pruHUw+kljThAPi2g0nhgMdvWj4bQRh4O8MYp9NR60XYcylaLXmYA8YXSw==" rel="stylesheet" href="https://assets-cdn.github.com/assets/github-5043b3d96d50b119b971c2cdde4e0a62.css" />
  
  
  <link crossorigin="anonymous" media="all" integrity="sha512-yiJlaqOzeTU+S1E7OWf1xHkAosW1l4Lum0URPcPeQqKjKdZuSb9JoS5h1Dn8vs5rmdGshJ8pTr/FWwGKHlr1SQ==" rel="stylesheet" href="https://assets-cdn.github.com/assets/site-f84f81f77b3e1a4462036783c13c150d.css" />
  

  <meta name="viewport" content="width=device-width">
  
  <title>You-Dont-Know-JS/ch2.md at master · getify/You-Dont-Know-JS · GitHub</title>
    <meta name="description" content="A book series on JavaScript. @YDKJS on twitter. Contribute to getify/You-Dont-Know-JS development by creating an account on GitHub.">
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">

    
    <meta property="og:image" content="https://avatars0.githubusercontent.com/u/150330?s=400&amp;v=4" /><meta property="og:site_name" content="GitHub" /><meta property="og:type" content="object" /><meta property="og:title" content="getify/You-Dont-Know-JS" /><meta property="og:url" content="https://github.com/getify/You-Dont-Know-JS" /><meta property="og:description" content="A book series on JavaScript. @YDKJS on twitter. Contribute to getify/You-Dont-Know-JS development by creating an account on GitHub." />

  <link rel="assets" href="https://assets-cdn.github.com/">
  
  <meta name="pjax-timeout" content="1000">
  
  <meta name="request-id" content="F91F:37B6:49B52EC:7703F90:5BA8D2D1" data-pjax-transient>


  

  <meta name="selected-link" value="repo_source" data-pjax-transient>

      <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
    <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
    <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">

  <meta name="octolytics-host" content="collector.githubapp.com" /><meta name="octolytics-app-id" content="github" /><meta name="octolytics-event-url" content="https://collector.githubapp.com/github-external/browser_event" /><meta name="octolytics-dimension-request_id" content="F91F:37B6:49B52EC:7703F90:5BA8D2D1" /><meta name="octolytics-dimension-region_edge" content="iad" /><meta name="octolytics-dimension-region_render" content="iad" />
<meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true" />



    <meta name="google-analytics" content="UA-3769691-2">


<meta class="js-ga-set" name="dimension1" content="Logged Out">



  

      <meta name="hostname" content="github.com">
    <meta name="user-login" content="">

      <meta name="expected-hostname" content="github.com">
    <meta name="js-proxy-site-detection-payload" content="ZjExZjJmMmJjZjA3OTY2N2U0NTMwN2IzODE2YjMyZWRmNjkwNmU2MDAzZjQxYjViY2YxNjU4MjJhYWY4YjExN3x7InJlbW90ZV9hZGRyZXNzIjoiMzEuMjcuMzguOTUiLCJyZXF1ZXN0X2lkIjoiRjkxRjozN0I2OjQ5QjUyRUM6NzcwM0Y5MDo1QkE4RDJEMSIsInRpbWVzdGFtcCI6MTUzNzc5MDY3MywiaG9zdCI6ImdpdGh1Yi5jb20ifQ==">

    <meta name="enabled-features" content="DASHBOARD_V2_LAYOUT_OPT_IN,EXPLORE_DISCOVER_REPOSITORIES,UNIVERSE_BANNER,MARKETPLACE_PLAN_RESTRICTION_EDITOR,QUOTE_MARKDOWN">

  <meta name="html-safe-nonce" content="7890c1073cb2902f49ec90fe0a93a92e7cabdf5e">

  <meta http-equiv="x-pjax-version" content="48839070ece5a75b6db249504aa0072e">
  

      <link href="https://github.com/getify/You-Dont-Know-JS/commits/master.atom" rel="alternate" title="Recent Commits to You-Dont-Know-JS:master" type="application/atom+xml">

  <meta name="go-import" content="github.com/getify/You-Dont-Know-JS git https://github.com/getify/You-Dont-Know-JS.git">

  <meta name="octolytics-dimension-user_id" content="150330" /><meta name="octolytics-dimension-user_login" content="getify" /><meta name="octolytics-dimension-repository_id" content="14440270" /><meta name="octolytics-dimension-repository_nwo" content="getify/You-Dont-Know-JS" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="14440270" /><meta name="octolytics-dimension-repository_network_root_nwo" content="getify/You-Dont-Know-JS" /><meta name="octolytics-dimension-repository_explore_github_marketplace_ci_cta_shown" content="false" />


    <link rel="canonical" href="https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md" data-pjax-transient>


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" class="js-site-favicon" href="https://assets-cdn.github.com/favicon.ico">

<meta name="theme-color" content="#1e2327">



  <link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-out env-production page-blob">
    

  <div class="position-relative js-header-wrapper ">
    <a href="#start-of-content" tabindex="1" class="px-2 py-4 bg-blue text-white show-on-focus js-skip-to-content">Skip to content</a>
    <div id="js-pjax-loader-bar" class="pjax-loader-bar"><div class="progress"></div></div>

    
    
    



        


  <header class="Header header-logged-out  position-relative f4 py-3" role="banner" >
    <div class="container-lg d-flex px-3">
      <div class="d-flex flex-justify-between flex-items-center">
        <a class="header-logo-invertocat my-0" href="https://github.com/" aria-label="Homepage" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark; experiment:site_header_dropdowns; group:control">
          <svg height="32" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="32" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
        </a>

      </div>

      <div class="HeaderMenu d-flex flex-justify-between flex-auto">
          <nav class="mt-0">
            <ul class="d-flex list-style-none">
                <li class="ml-2">
                  <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:features; experiment:site_header_dropdowns; group:control" data-selected-links="/features /features/project-management /features/code-review /features/project-management /features/integrations /features" href="/features">
                    Features
</a>                </li>
                <li class="ml-4">
                  <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:business; experiment:site_header_dropdowns; group:control" data-selected-links="/business /business/security /business/customers /business" href="/business">
                    Business
</a>                </li>

                <li class="ml-4">
                  <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:explore; experiment:site_header_dropdowns; group:control" data-selected-links="/explore /trending /trending/developers /integrations /integrations/feature/code /integrations/feature/collaborate /integrations/feature/ship showcases showcases_search showcases_landing /explore" href="/explore">
                    Explore
</a>                </li>

                <li class="ml-4">
                      <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:marketplace; experiment:site_header_dropdowns; group:control" data-selected-links=" /marketplace" href="/marketplace">
                        Marketplace
</a>                </li>
                <li class="ml-4">
                  <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:pricing; experiment:site_header_dropdowns; group:control" data-selected-links="/pricing /pricing/developer /pricing/team /pricing/business-hosted /pricing/business-enterprise /pricing" href="/pricing">
                    Pricing
</a>                </li>
            </ul>
          </nav>

        <div class="d-flex">
            <div class="d-lg-flex flex-items-center mr-3">
              <div class="header-search scoped-search site-scoped-search js-site-search position-relative js-jump-to"
  role="combobox"
  aria-owns="jump-to-results"
  aria-label="Search or jump to"
  aria-haspopup="listbox"
  aria-expanded="false"
>
  <div class="position-relative">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-site-search-form" data-scope-type="Repository" data-scope-id="14440270" data-scoped-search-url="/getify/You-Dont-Know-JS/search" data-unscoped-search-url="/search" action="/getify/You-Dont-Know-JS/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
      <label class="form-control header-search-wrapper header-search-wrapper-jump-to position-relative d-flex flex-justify-between flex-items-center js-chromeless-input-container">
        <input type="text"
          class="form-control header-search-input jump-to-field js-jump-to-field js-site-search-focus js-site-search-field is-clearable"
          data-hotkey="s,/"
          name="q"
          value=""
          placeholder="Search"
          data-unscoped-placeholder="Search GitHub"
          data-scoped-placeholder="Search"
          autocapitalize="off"
          aria-autocomplete="list"
          aria-controls="jump-to-results"
          data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations#csrf-token=A0WiDU1PdqtxPWDtSTpAtvIeThFwU0eQ22lCHwV+UL3wISRKRkfvAfNIqlainrLJ6FimFBbGSthdJJfFYTx37A=="
          spellcheck="false"
          autocomplete="off"
          >
          <input type="hidden" class="js-site-search-type-field" name="type" >
            <img src="https://assets-cdn.github.com/images/search-shortcut-hint.svg" alt="" class="mr-2 header-search-key-slash">

            <div class="Box position-absolute overflow-hidden d-none jump-to-suggestions js-jump-to-suggestions-container">
              <ul class="d-none js-jump-to-suggestions-template-container">
                <li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item" role="option">
                  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center p-2 jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open" href="">
                    <div class="jump-to-octicon js-jump-to-octicon mr-2 text-center d-none">
                      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 12 16" version="1.1" role="img"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
                      <svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 15 16" version="1.1" role="img"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1z"/></svg>
                      <svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M15.7 13.3l-3.81-3.83A5.93 5.93 0 0 0 13 6c0-3.31-2.69-6-6-6S1 2.69 1 6s2.69 6 6 6c1.3 0 2.48-.41 3.47-1.11l3.83 3.81c.19.2.45.3.7.3.25 0 .52-.09.7-.3a.996.996 0 0 0 0-1.41v.01zM7 10.7c-2.59 0-4.7-2.11-4.7-4.7 0-2.59 2.11-4.7 4.7-4.7 2.59 0 4.7 2.11 4.7 4.7 0 2.59-2.11 4.7-4.7 4.7z"/></svg>
                    </div>

                    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

                    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
                    </div>

                    <div class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none js-jump-to-badge-search">
                      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
                        In this repository
                      </span>
                      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
                        All GitHub
                      </span>
                      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
                    </div>

                    <div aria-hidden="true" class="border rounded-1 flex-shrink-0 bg-gray px-1 text-gray-light ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
                      Jump to
                      <span class="d-inline-block ml-1 v-align-middle">↵</span>
                    </div>
                  </a>
                </li>
              </ul>
              <ul class="d-none js-jump-to-no-results-template-container">
                <li class="d-flex flex-justify-center flex-items-center p-3 f5 d-none">
                  <span class="text-gray">No suggested jump to results</span>
                </li>
              </ul>

              <ul id="jump-to-results" role="listbox" class="js-navigation-container jump-to-suggestions-results-container js-jump-to-suggestions-results-container" >
                <li class="d-flex flex-justify-center flex-items-center p-0 f5">
                  <img src="https://assets-cdn.github.com/images/spinners/octocat-spinner-128.gif" alt="Octocat Spinner Icon" class="m-2" width="28">
                </li>
              </ul>
            </div>
      </label>
</form>  </div>
</div>

            </div>

          <span class="d-inline-block">
              <div class="HeaderNavlink px-0 py-2 m-0">
                <a class="text-bold text-white no-underline" href="/login?return_to=%2Fgetify%2FYou-Dont-Know-JS%2Fblob%2Fmaster%2Fthis%2520%2526%2520object%2520prototypes%2Fch2.md" data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in; experiment:site_header_dropdowns; group:control">Sign in</a>
                  <span class="text-gray">or</span>
                  <a class="text-bold text-white no-underline" href="/join?source=header-repo" data-ga-click="(Logged out) Header, clicked Sign up, text:sign-up; experiment:site_header_dropdowns; group:control">Sign up</a>
              </div>
          </span>
        </div>
      </div>
    </div>
  </header>

  </div>

  <div id="start-of-content" class="show-on-focus"></div>

    <div id="js-flash-container">


</div>



  <div role="main" class="application-main ">
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <div id="js-repo-pjax-container" data-pjax-container >
      







  <div class="pagehead repohead instapaper_ignore readability-menu experiment-repo-nav  ">
    <div class="repohead-details-container clearfix container">

      <ul class="pagehead-actions">
  <li>
      <a href="/login?return_to=%2Fgetify%2FYou-Dont-Know-JS"
    class="btn btn-sm btn-with-count tooltipped tooltipped-s"
    aria-label="You must be signed in to watch a repository" rel="nofollow">
    <svg class="octicon octicon-eye v-align-text-bottom" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
    Watch
  </a>
  <a class="social-count" href="/getify/You-Dont-Know-JS/watchers"
     aria-label="4796 users are watching this repository">
    4,796
  </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fgetify%2FYou-Dont-Know-JS"
    class="btn btn-sm btn-with-count tooltipped tooltipped-s"
    aria-label="You must be signed in to star a repository" rel="nofollow">
    <svg class="octicon octicon-star v-align-text-bottom" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74L14 6z"/></svg>
    Star
  </a>

    <a class="social-count js-social-count" href="/getify/You-Dont-Know-JS/stargazers"
      aria-label="88853 users starred this repository">
      88,853
    </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fgetify%2FYou-Dont-Know-JS"
        class="btn btn-sm btn-with-count tooltipped tooltipped-s"
        aria-label="You must be signed in to fork a repository" rel="nofollow">
        <svg class="octicon octicon-repo-forked v-align-text-bottom" viewBox="0 0 10 16" version="1.1" width="10" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 1a1.993 1.993 0 0 0-1 3.72V6L5 8 3 6V4.72A1.993 1.993 0 0 0 2 1a1.993 1.993 0 0 0-1 3.72V6.5l3 3v1.78A1.993 1.993 0 0 0 5 15a1.993 1.993 0 0 0 1-3.72V9.5l3-3V4.72A1.993 1.993 0 0 0 8 1zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3 10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3-10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
        Fork
      </a>

    <a href="/getify/You-Dont-Know-JS/network/members" class="social-count"
       aria-label="16864 users forked this repository">
      16,864
    </a>
  </li>
</ul>

      <h1 class="public ">
  <svg class="octicon octicon-repo" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
  <span class="author" itemprop="author"><a class="url fn" rel="author" href="/getify">getify</a></span><!--
--><span class="path-divider">/</span><!--
--><strong itemprop="name"><a data-pjax="#js-repo-pjax-container" href="/getify/You-Dont-Know-JS">You-Dont-Know-JS</a></strong>

</h1>

    </div>
    
<nav class="reponav js-repo-nav js-sidenav-container-pjax container"
     itemscope
     itemtype="http://schema.org/BreadcrumbList"
     role="navigation"
     data-pjax="#js-repo-pjax-container">

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a class="js-selected-navigation-item selected reponav-item" itemprop="url" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages /getify/You-Dont-Know-JS" href="/getify/You-Dont-Know-JS">
      <svg class="octicon octicon-code" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z"/></svg>
      <span itemprop="name">Code</span>
      <meta itemprop="position" content="1">
</a>  </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a itemprop="url" data-hotkey="g i" class="js-selected-navigation-item reponav-item" data-selected-links="repo_issues repo_labels repo_milestones /getify/You-Dont-Know-JS/issues" href="/getify/You-Dont-Know-JS/issues">
        <svg class="octicon octicon-issue-opened" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"/></svg>
        <span itemprop="name">Issues</span>
        <span class="Counter">110</span>
        <meta itemprop="position" content="2">
</a>    </span>

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a data-hotkey="g p" itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_pulls checks /getify/You-Dont-Know-JS/pulls" href="/getify/You-Dont-Know-JS/pulls">
      <svg class="octicon octicon-git-pull-request" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
      <span itemprop="name">Pull requests</span>
      <span class="Counter">75</span>
      <meta itemprop="position" content="3">
</a>  </span>

    <a data-hotkey="g b" class="js-selected-navigation-item reponav-item" data-selected-links="repo_projects new_repo_project repo_project /getify/You-Dont-Know-JS/projects" href="/getify/You-Dont-Know-JS/projects">
      <svg class="octicon octicon-project" viewBox="0 0 15 16" version="1.1" width="15" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1z"/></svg>
      Projects
      <span class="Counter" >1</span>
</a>


    <a class="js-selected-navigation-item reponav-item" data-hotkey="g w" data-selected-links="repo_wiki /getify/You-Dont-Know-JS/wiki" href="/getify/You-Dont-Know-JS/wiki">
      <svg class="octicon octicon-book" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M3 5h4v1H3V5zm0 3h4V7H3v1zm0 2h4V9H3v1zm11-5h-4v1h4V5zm0 2h-4v1h4V7zm0 2h-4v1h4V9zm2-6v9c0 .55-.45 1-1 1H9.5l-1 1-1-1H2c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h5.5l1 1 1-1H15c.55 0 1 .45 1 1zm-8 .5L7.5 3H2v9h6V3.5zm7-.5H9.5l-.5.5V12h6V3z"/></svg>
      Wiki
</a>
  <a class="js-selected-navigation-item reponav-item" data-selected-links="repo_graphs repo_contributors dependency_graph pulse alerts /getify/You-Dont-Know-JS/pulse" href="/getify/You-Dont-Know-JS/pulse">
    <svg class="octicon octicon-graph" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M16 14v1H0V0h1v14h15zM5 13H3V8h2v5zm4 0H7V3h2v10zm4 0h-2V6h2v7z"/></svg>
    Insights
</a>

</nav>


  </div>

<div class="container new-discussion-timeline experiment-repo-nav  ">
  <div class="repository-content ">

    
  <a class="d-none js-permalink-shortcut" data-hotkey="y" href="/getify/You-Dont-Know-JS/blob/0cc17c53ff772e20dfd6a7072c965df2486116e8/this%20%26%20object%20prototypes/ch2.md">Permalink</a>

  <!-- blob contrib key: blob_contributors:v21:b27c9386eee157b63ddc4c9da68d2a75 -->

      <div class="signup-prompt-bg rounded-1">
      <div class="signup-prompt p-4 text-center mb-4 rounded-1">
        <div class="position-relative">
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form action="/site/dismiss_signup_prompt" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="DuEyDCa7n8dhsNDJtQggfjDDvTcHby/EXfnbJchnDjlPGbc3IA8F3B3OV7Y3iX0J+gJHLQwvY4f5jXFaS+Dxsw==" />
            <button type="submit" class="position-absolute top-0 right-0 btn-link link-gray" data-ga-click="(Logged out) Sign up prompt, clicked Dismiss, text:dismiss">
              Dismiss
            </button>
</form>          <h3 class="pt-2">Join GitHub today</h3>
          <p class="col-6 mx-auto">GitHub is home to over 28 million developers working together to host and review code, manage projects, and build software together.</p>
          <a class="btn btn-primary" href="/join?source=prompt-blob-show" data-ga-click="(Logged out) Sign up prompt, clicked Sign up, text:sign-up">Sign up</a>
        </div>
      </div>
    </div>


  <div class="file-navigation">
    
<div class="select-menu branch-select-menu js-menu-container js-select-menu float-left">
  <button class=" btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    
    type="button" aria-label="Switch branches or tags" aria-expanded="false" aria-haspopup="true">
      <i>Branch:</i>
      <span class="js-select-button css-truncate-target">master</span>
  </button>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax>

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <svg class="octicon octicon-x js-menu-close" role="img" aria-label="Close" viewBox="0 0 12 16" version="1.1" width="12" height="16"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
        <span class="select-menu-title">Switch branches/tags</span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="form-control js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tag…" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/getify/You-Dont-Know-JS/blob/1ed-zh-CN/this%20&amp;%20object%20prototypes/ch2.md"
               data-name="1ed-zh-CN"
               data-skip-pjax="true"
               rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                1ed-zh-CN
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/ch2.md"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                master
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

    <div class="BtnGroup float-right">
      <a href="/getify/You-Dont-Know-JS/find/master"
            class="js-pjax-capture-input btn btn-sm BtnGroup-item"
            data-pjax
            data-hotkey="t">
        Find file
      </a>
      <clipboard-copy for="blob-path" class="btn btn-sm BtnGroup-item">
        Copy path
      </clipboard-copy>
    </div>
    <div id="blob-path" class="breadcrumb">
      <span class="repo-root js-repo-root"><span class="js-path-segment"><a data-pjax="true" href="/getify/You-Dont-Know-JS"><span>You-Dont-Know-JS</span></a></span></span><span class="separator">/</span><span class="js-path-segment"><a data-pjax="true" href="/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes"><span>this &amp; object prototypes</span></a></span><span class="separator">/</span><strong class="final-path">ch2.md</strong>
    </div>
  </div>


  
  <div class="commit-tease">
      <span class="float-right">
        <a class="commit-tease-sha" href="/getify/You-Dont-Know-JS/commit/ed9ce893d6d8ee78c28279ac770cb4def030de7d" data-pjax>
          ed9ce89
        </a>
        <relative-time datetime="2015-08-05T11:58:42Z">Aug 5, 2015</relative-time>
      </span>
      <div>
        <a rel="contributor" data-skip-pjax="true" data-hovercard-user-id="7026031" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/JoseBalado"><img class="avatar" src="https://avatars2.githubusercontent.com/u/7026031?s=40&amp;v=4" width="20" height="20" alt="@JoseBalado" /></a>
        <a class="user-mention" rel="contributor" data-hovercard-user-id="7026031" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/JoseBalado">JoseBalado</a>
          <a data-pjax="true" title="fixed typo" class="message" href="/getify/You-Dont-Know-JS/commit/ed9ce893d6d8ee78c28279ac770cb4def030de7d">fixed typo</a>
      </div>

    <div class="commit-tease-contributors">
      
<details class="details-reset details-overlay details-overlay-dark lh-default text-gray-dark float-left mr-2" id="blob_contributors_box">
  <summary class="btn-link" aria-haspopup="dialog"  >
    
    <span><strong>9</strong> contributors</span>
  </summary>
  <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast " aria-label="Users who have contributed to this file">
    <div class="Box-header">
      <button class="Box-btn-octicon btn-octicon float-right" type="button" aria-label="Close dialog" data-close-dialog>
        <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
      </button>
      <h3 class="Box-title">Users who have contributed to this file</h3>
    </div>
    
        <ul class="list-style-none overflow-auto">
            <li class="Box-row">
              <a class="link-gray-dark no-underline" href="/getify">
                <img class="avatar mr-2" alt="" src="https://avatars3.githubusercontent.com/u/150330?s=40&amp;v=4" width="20" height="20" />
                getify
</a>            </li>
            <li class="Box-row">
              <a class="link-gray-dark no-underline" href="/zackgao">
                <img class="avatar mr-2" alt="" src="https://avatars3.githubusercontent.com/u/1768718?s=40&amp;v=4" width="20" height="20" />
                zackgao
</a>            </li>
            <li class="Box-row">
              <a class="link-gray-dark no-underline" href="/JoseBalado">
                <img class="avatar mr-2" alt="" src="https://avatars2.githubusercontent.com/u/7026031?s=40&amp;v=4" width="20" height="20" />
                JoseBalado
</a>            </li>
            <li class="Box-row">
              <a class="link-gray-dark no-underline" href="/pelonpelon">
                <img class="avatar mr-2" alt="" src="https://avatars3.githubusercontent.com/u/254146?s=40&amp;v=4" width="20" height="20" />
                pelonpelon
</a>            </li>
            <li class="Box-row">
              <a class="link-gray-dark no-underline" href="/neu5">
                <img class="avatar mr-2" alt="" src="https://avatars1.githubusercontent.com/u/980955?s=40&amp;v=4" width="20" height="20" />
                neu5
</a>            </li>
            <li class="Box-row">
              <a class="link-gray-dark no-underline" href="/michaellopez">
                <img class="avatar mr-2" alt="" src="https://avatars1.githubusercontent.com/u/487039?s=40&amp;v=4" width="20" height="20" />
                michaellopez
</a>            </li>
            <li class="Box-row">
              <a class="link-gray-dark no-underline" href="/machineloop">
                <img class="avatar mr-2" alt="" src="https://avatars3.githubusercontent.com/u/3682072?s=40&amp;v=4" width="20" height="20" />
                machineloop
</a>            </li>
            <li class="Box-row">
              <a class="link-gray-dark no-underline" href="/yannmadeleine">
                <img class="avatar mr-2" alt="" src="https://avatars0.githubusercontent.com/u/629627?s=40&amp;v=4" width="20" height="20" />
                yannmadeleine
</a>            </li>
            <li class="Box-row">
              <a class="link-gray-dark no-underline" href="/davepreston">
                <img class="avatar mr-2" alt="" src="https://avatars1.githubusercontent.com/u/334989?s=40&amp;v=4" width="20" height="20" />
                davepreston
</a>            </li>
        </ul>

  </details-dialog>
</details>
          <a class="avatar-link" data-hovercard-user-id="150330" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/getify/You-Dont-Know-JS/commits/master/this%20%26%20object%20prototypes/ch2.md?author=getify">
      <img class="avatar" src="https://avatars3.githubusercontent.com/u/150330?s=40&amp;v=4" width="20" height="20" alt="@getify" /> 
</a>    <a class="avatar-link" data-hovercard-user-id="1768718" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/getify/You-Dont-Know-JS/commits/master/this%20%26%20object%20prototypes/ch2.md?author=zackgao">
      <img class="avatar" src="https://avatars3.githubusercontent.com/u/1768718?s=40&amp;v=4" width="20" height="20" alt="@zackgao" /> 
</a>    <a class="avatar-link" data-hovercard-user-id="7026031" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/getify/You-Dont-Know-JS/commits/master/this%20%26%20object%20prototypes/ch2.md?author=JoseBalado">
      <img class="avatar" src="https://avatars2.githubusercontent.com/u/7026031?s=40&amp;v=4" width="20" height="20" alt="@JoseBalado" /> 
</a>    <a class="avatar-link" data-hovercard-user-id="254146" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/getify/You-Dont-Know-JS/commits/master/this%20%26%20object%20prototypes/ch2.md?author=pelonpelon">
      <img class="avatar" src="https://avatars3.githubusercontent.com/u/254146?s=40&amp;v=4" width="20" height="20" alt="@pelonpelon" /> 
</a>    <a class="avatar-link" data-hovercard-user-id="980955" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/getify/You-Dont-Know-JS/commits/master/this%20%26%20object%20prototypes/ch2.md?author=neu5">
      <img class="avatar" src="https://avatars1.githubusercontent.com/u/980955?s=40&amp;v=4" width="20" height="20" alt="@neu5" /> 
</a>    <a class="avatar-link" data-hovercard-user-id="487039" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/getify/You-Dont-Know-JS/commits/master/this%20%26%20object%20prototypes/ch2.md?author=michaellopez">
      <img class="avatar" src="https://avatars1.githubusercontent.com/u/487039?s=40&amp;v=4" width="20" height="20" alt="@michaellopez" /> 
</a>    <a class="avatar-link" data-hovercard-user-id="3682072" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/getify/You-Dont-Know-JS/commits/master/this%20%26%20object%20prototypes/ch2.md?author=machineloop">
      <img class="avatar" src="https://avatars3.githubusercontent.com/u/3682072?s=40&amp;v=4" width="20" height="20" alt="@machineloop" /> 
</a>    <a class="avatar-link" data-hovercard-user-id="629627" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/getify/You-Dont-Know-JS/commits/master/this%20%26%20object%20prototypes/ch2.md?author=yannmadeleine">
      <img class="avatar" src="https://avatars0.githubusercontent.com/u/629627?s=40&amp;v=4" width="20" height="20" alt="@yannmadeleine" /> 
</a>    <a class="avatar-link" data-hovercard-user-id="334989" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/getify/You-Dont-Know-JS/commits/master/this%20%26%20object%20prototypes/ch2.md?author=davepreston">
      <img class="avatar" src="https://avatars1.githubusercontent.com/u/334989?s=40&amp;v=4" width="20" height="20" alt="@davepreston" /> 
</a>

    </div>
  </div>



  <div class="file">
    <div class="file-header">
  <div class="file-actions">

    <div class="BtnGroup">
      <a id="raw-url" class="btn btn-sm BtnGroup-item" href="/getify/You-Dont-Know-JS/raw/master/this%20%26%20object%20prototypes/ch2.md">Raw</a>
        <a class="btn btn-sm js-update-url-with-hash BtnGroup-item" data-hotkey="b" href="/getify/You-Dont-Know-JS/blame/master/this%20%26%20object%20prototypes/ch2.md">Blame</a>
      <a rel="nofollow" class="btn btn-sm BtnGroup-item" href="/getify/You-Dont-Know-JS/commits/master/this%20%26%20object%20prototypes/ch2.md">History</a>
    </div>


        <button type="button" class="btn-octicon disabled tooltipped tooltipped-nw"
          aria-label="You must be signed in to make or propose changes">
          <svg class="octicon octicon-pencil" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M0 12v3h3l8-8-3-3-8 8zm3 2H1v-2h1v1h1v1zm10.3-9.3L12 6 9 3l1.3-1.3a.996.996 0 0 1 1.41 0l1.59 1.59c.39.39.39 1.02 0 1.41z"/></svg>
        </button>
        <button type="button" class="btn-octicon btn-octicon-danger disabled tooltipped tooltipped-nw"
          aria-label="You must be signed in to make or propose changes">
          <svg class="octicon octicon-trashcan" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11 2H9c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1H2c-.55 0-1 .45-1 1v1c0 .55.45 1 1 1v9c0 .55.45 1 1 1h7c.55 0 1-.45 1-1V5c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 12H3V5h1v8h1V5h1v8h1V5h1v8h1V5h1v9zm1-10H2V3h9v1z"/></svg>
        </button>
  </div>

  <div class="file-info">
      858 lines (577 sloc)
      <span class="file-info-divider"></span>
    34.6 KB
  </div>
</div>

    
  <div id="readme" class="readme blob instapaper_body">
    <article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-you-dont-know-js-this--object-prototypes" class="anchor" aria-hidden="true" href="#you-dont-know-js-this--object-prototypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>You Don't Know JS: <em>this</em> &amp; Object Prototypes</h1>
<h1><a id="user-content-chapter-2-this-all-makes-sense-now" class="anchor" aria-hidden="true" href="#chapter-2-this-all-makes-sense-now"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Chapter 2: <code>this</code> All Makes Sense Now!</h1>
<p>In Chapter 1, we discarded various misconceptions about <code>this</code> and learned instead that <code>this</code> is a binding made for each function invocation, based entirely on its <strong>call-site</strong> (how the function is called).</p>
<h2><a id="user-content-call-site" class="anchor" aria-hidden="true" href="#call-site"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Call-site</h2>
<p>To understand <code>this</code> binding, we have to understand the call-site: the location in code where a function is called (<strong>not where it's declared</strong>). We must inspect the call-site to answer the question: what's <em>this</em> <code>this</code> a reference to?</p>
<p>Finding the call-site is generally: "go locate where a function is called from", but it's not always that easy, as certain coding patterns can obscure the <em>true</em> call-site.</p>
<p>What's important is to think about the <strong>call-stack</strong> (the stack of functions that have been called to get us to the current moment in execution). The call-site we care about is <em>in</em> the invocation <em>before</em> the currently executing function.</p>
<p>Let's demonstrate call-stack and call-site:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">baz</span>() {
    <span class="pl-c"><span class="pl-c">//</span> call-stack is: `baz`</span>
    <span class="pl-c"><span class="pl-c">//</span> so, our call-site is in the global scope</span>

    <span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-s"><span class="pl-pds">"</span>baz<span class="pl-pds">"</span></span> );
    <span class="pl-en">bar</span>(); <span class="pl-c"><span class="pl-c">//</span> &lt;-- call-site for `bar`</span>
}

<span class="pl-k">function</span> <span class="pl-en">bar</span>() {
    <span class="pl-c"><span class="pl-c">//</span> call-stack is: `baz` -&gt; `bar`</span>
    <span class="pl-c"><span class="pl-c">//</span> so, our call-site is in `baz`</span>

    <span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span> );
    <span class="pl-en">foo</span>(); <span class="pl-c"><span class="pl-c">//</span> &lt;-- call-site for `foo`</span>
}

<span class="pl-k">function</span> <span class="pl-en">foo</span>() {
    <span class="pl-c"><span class="pl-c">//</span> call-stack is: `baz` -&gt; `bar` -&gt; `foo`</span>
    <span class="pl-c"><span class="pl-c">//</span> so, our call-site is in `bar`</span>

    <span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span> );
}

<span class="pl-en">baz</span>(); <span class="pl-c"><span class="pl-c">//</span> &lt;-- call-site for `baz`</span></pre></div>
<p>Take care when analyzing code to find the actual call-site (from the call-stack), because it's the only thing that matters for <code>this</code> binding.</p>
<p><strong>Note:</strong> You can visualize a call-stack in your mind by looking at the chain of function calls in order, as we did with the comments in the above snippet. But this is painstaking and error-prone. Another way of seeing the call-stack is using a debugger tool in your browser. Most modern desktop browsers have built-in developer tools, which includes a JS debugger. In the above snippet, you could have set a breakpoint in the tools for the first line of the <code>foo()</code> function, or simply inserted the <code>debugger;</code> statement on that first line. When you run the page, the debugger will pause at this location, and will show you a list of the functions that have been called to get to that line, which will be your call stack. So, if you're trying to diagnose <code>this</code> binding, use the developer tools to get the call-stack, then find the second item from the top, and that will show you the real call-site.</p>
<h2><a id="user-content-nothing-but-rules" class="anchor" aria-hidden="true" href="#nothing-but-rules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Nothing But Rules</h2>
<p>We turn our attention now to <em>how</em> the call-site determines where <code>this</code> will point during the execution of a function.</p>
<p>You must inspect the call-site and determine which of 4 rules applies. We will first explain each of these 4 rules independently, and then we will illustrate their order of precedence, if multiple rules <em>could</em> apply to the call-site.</p>
<h3><a id="user-content-default-binding" class="anchor" aria-hidden="true" href="#default-binding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Default Binding</h3>
<p>The first rule we will examine comes from the most common case of function calls: standalone function invocation. Think of <em>this</em> <code>this</code> rule as the default catch-all rule when none of the other rules apply.</p>
<p>Consider this code:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> a <span class="pl-k">=</span> <span class="pl-c1">2</span>;

<span class="pl-en">foo</span>(); <span class="pl-c"><span class="pl-c">//</span> 2</span></pre></div>
<p>The first thing to note, if you were not already aware, is that variables declared in the global scope, as <code>var a = 2</code> is, are synonymous with global-object properties of the same name. They're not copies of each other, they <em>are</em> each other. Think of it as two sides of the same coin.</p>
<p>Secondly, we see that when <code>foo()</code> is called, <code>this.a</code> resolves to our global variable <code>a</code>. Why? Because in this case, the <em>default binding</em> for <code>this</code> applies to the function call, and so points <code>this</code> at the global object.</p>
<p>How do we know that the <em>default binding</em> rule applies here? We examine the call-site to see how <code>foo()</code> is called. In our snippet, <code>foo()</code> is called with a plain, un-decorated function reference. None of the other rules we will demonstrate will apply here, so the <em>default binding</em> applies instead.</p>
<p>If <code>strict mode</code> is in effect, the global object is not eligible for the <em>default binding</em>, so the <code>this</code> is instead set to <code>undefined</code>.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-s"><span class="pl-pds">"</span>use strict<span class="pl-pds">"</span></span>;

	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> a <span class="pl-k">=</span> <span class="pl-c1">2</span>;

<span class="pl-en">foo</span>(); <span class="pl-c"><span class="pl-c">//</span> TypeError: `this` is `undefined`</span></pre></div>
<p>A subtle but important detail is: even though the overall <code>this</code> binding rules are entirely based on the call-site, the global object is <strong>only</strong> eligible for the <em>default binding</em> if the <strong>contents</strong> of <code>foo()</code> are <strong>not</strong> running in <code>strict mode</code>; the <code>strict mode</code> state of the call-site of <code>foo()</code> is irrelevant.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> a <span class="pl-k">=</span> <span class="pl-c1">2</span>;

(<span class="pl-k">function</span>(){
	<span class="pl-s"><span class="pl-pds">"</span>use strict<span class="pl-pds">"</span></span>;

	<span class="pl-en">foo</span>(); <span class="pl-c"><span class="pl-c">//</span> 2</span>
})();</pre></div>
<p><strong>Note:</strong> Intentionally mixing <code>strict mode</code> and non-<code>strict mode</code> together in your own code is generally frowned upon. Your entire program should probably either be <strong>Strict</strong> or <strong>non-Strict</strong>. However, sometimes you include a third-party library that has different <strong>Strict</strong>'ness than your own code, so care must be taken over these subtle compatibility details.</p>
<h3><a id="user-content-implicit-binding" class="anchor" aria-hidden="true" href="#implicit-binding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implicit Binding</h3>
<p>Another rule to consider is: does the call-site have a context object, also referred to as an owning or containing object, though <em>these</em> alternate terms could be slightly misleading.</p>
<p>Consider:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>,
	foo<span class="pl-k">:</span> foo
};

<span class="pl-smi">obj</span>.<span class="pl-en">foo</span>(); <span class="pl-c"><span class="pl-c">//</span> 2</span></pre></div>
<p>Firstly, notice the manner in which <code>foo()</code> is declared and then later added as a reference property onto <code>obj</code>. Regardless of whether <code>foo()</code> is initially declared <em>on</em> <code>obj</code>, or is added as a reference later (as this snippet shows), in neither case is the <strong>function</strong> really "owned" or "contained" by the <code>obj</code> object.</p>
<p>However, the call-site <em>uses</em> the <code>obj</code> context to <strong>reference</strong> the function, so you <em>could</em> say that the <code>obj</code> object "owns" or "contains" the <strong>function reference</strong> at the time the function is called.</p>
<p>Whatever you choose to call this pattern, at the point that <code>foo()</code> is called, it's preceded by an object reference to <code>obj</code>. When there is a context object for a function reference, the <em>implicit binding</em> rule says that it's <em>that</em> object which should be used for the function call's <code>this</code> binding.</p>
<p>Because <code>obj</code> is the <code>this</code> for the <code>foo()</code> call, <code>this.a</code> is synonymous with <code>obj.a</code>.</p>
<p>Only the top/last level of an object property reference chain matters to the call-site. For instance:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> obj2 <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">42</span>,
	foo<span class="pl-k">:</span> foo
};

<span class="pl-k">var</span> obj1 <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>,
	obj2<span class="pl-k">:</span> obj2
};

<span class="pl-smi">obj1</span>.<span class="pl-smi">obj2</span>.<span class="pl-en">foo</span>(); <span class="pl-c"><span class="pl-c">//</span> 42</span></pre></div>
<h4><a id="user-content-implicitly-lost" class="anchor" aria-hidden="true" href="#implicitly-lost"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implicitly Lost</h4>
<p>One of the most common frustrations that <code>this</code> binding creates is when an <em>implicitly bound</em> function loses that binding, which usually means it falls back to the <em>default binding</em>, of either the global object or <code>undefined</code>, depending on <code>strict mode</code>.</p>
<p>Consider:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>,
	foo<span class="pl-k">:</span> foo
};

<span class="pl-k">var</span> bar <span class="pl-k">=</span> <span class="pl-smi">obj</span>.<span class="pl-smi">foo</span>; <span class="pl-c"><span class="pl-c">//</span> function reference/alias!</span>

<span class="pl-k">var</span> a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>oops, global<span class="pl-pds">"</span></span>; <span class="pl-c"><span class="pl-c">//</span> `a` also property on global object</span>

<span class="pl-en">bar</span>(); <span class="pl-c"><span class="pl-c">//</span> "oops, global"</span></pre></div>
<p>Even though <code>bar</code> appears to be a reference to <code>obj.foo</code>, in fact, it's really just another reference to <code>foo</code> itself. Moreover, the call-site is what matters, and the call-site is <code>bar()</code>, which is a plain, un-decorated call and thus the <em>default binding</em> applies.</p>
<p>The more subtle, more common, and more unexpected way this occurs is when we consider passing a callback function:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">function</span> <span class="pl-en">doFoo</span>(<span class="pl-smi">fn</span>) {
	<span class="pl-c"><span class="pl-c">//</span> `fn` is just another reference to `foo`</span>

	<span class="pl-en">fn</span>(); <span class="pl-c"><span class="pl-c">//</span> &lt;-- call-site!</span>
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>,
	foo<span class="pl-k">:</span> foo
};

<span class="pl-k">var</span> a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>oops, global<span class="pl-pds">"</span></span>; <span class="pl-c"><span class="pl-c">//</span> `a` also property on global object</span>

<span class="pl-en">doFoo</span>( <span class="pl-smi">obj</span>.<span class="pl-smi">foo</span> ); <span class="pl-c"><span class="pl-c">//</span> "oops, global"</span></pre></div>
<p>Parameter passing is just an implicit assignment, and since we're passing a function, it's an implicit reference assignment, so the end result is the same as the previous snippet.</p>
<p>What if the function you're passing your callback to is not your own, but built-in to the language? No difference, same outcome.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>,
	foo<span class="pl-k">:</span> foo
};

<span class="pl-k">var</span> a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>oops, global<span class="pl-pds">"</span></span>; <span class="pl-c"><span class="pl-c">//</span> `a` also property on global object</span>

<span class="pl-c1">setTimeout</span>( <span class="pl-smi">obj</span>.<span class="pl-smi">foo</span>, <span class="pl-c1">100</span> ); <span class="pl-c"><span class="pl-c">//</span> "oops, global"</span></pre></div>
<p>Think about this crude theoretical pseudo-implementation of <code>setTimeout()</code> provided as a built-in from the JavaScript environment:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">setTimeout</span>(<span class="pl-smi">fn</span>,<span class="pl-smi">delay</span>) {
	<span class="pl-c"><span class="pl-c">//</span> wait (somehow) for `delay` milliseconds</span>
	<span class="pl-en">fn</span>(); <span class="pl-c"><span class="pl-c">//</span> &lt;-- call-site!</span>
}</pre></div>
<p>It's quite common that our function callbacks <em>lose</em> their <code>this</code> binding, as we've just seen. But another way that <code>this</code> can surprise us is when the function we've passed our callback to intentionally changes the <code>this</code> for the call. Event handlers in popular JavaScript libraries are quite fond of forcing your callback to have a <code>this</code> which points to, for instance, the DOM element that triggered the event. While that may sometimes be useful, other times it can be downright infuriating. Unfortunately, these tools rarely let you choose.</p>
<p>Either way the <code>this</code> is changed unexpectedly, you are not really in control of how your callback function reference will be executed, so you have no way (yet) of controlling the call-site to give your intended binding. We'll see shortly a way of "fixing" that problem by <em>fixing</em> the <code>this</code>.</p>
<h3><a id="user-content-explicit-binding" class="anchor" aria-hidden="true" href="#explicit-binding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Explicit Binding</h3>
<p>With <em>implicit binding</em> as we just saw, we had to mutate the object in question to include a reference on itself to the function, and use this property function reference to indirectly (implicitly) bind <code>this</code> to the object.</p>
<p>But, what if you want to force a function call to use a particular object for the <code>this</code> binding, without putting a property function reference on the object?</p>
<p>"All" functions in the language have some utilities available to them (via their <code>[[Prototype]]</code> -- more on that later) which can be useful for this task. Specifically, functions have <code>call(..)</code> and <code>apply(..)</code> methods. Technically, JavaScript host environments sometimes provide functions which are special enough (a kind way of putting it!) that they do not have such functionality. But those are few. The vast majority of functions provided, and certainly all functions you will create, do have access to <code>call(..)</code> and <code>apply(..)</code>.</p>
<p>How do these utilities work? They both take, as their first parameter, an object to use for the <code>this</code>, and then invoke the function with that <code>this</code> specified. Since you are directly stating what you want the <code>this</code> to be, we call it <em>explicit binding</em>.</p>
<p>Consider:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>
};

<span class="pl-smi">foo</span>.<span class="pl-c1">call</span>( obj ); <span class="pl-c"><span class="pl-c">//</span> 2</span></pre></div>
<p>Invoking <code>foo</code> with <em>explicit binding</em> by <code>foo.call(..)</code> allows us to force its <code>this</code> to be <code>obj</code>.</p>
<p>If you pass a simple primitive value (of type <code>string</code>, <code>boolean</code>, or <code>number</code>) as the <code>this</code> binding, the primitive value is wrapped in its object-form (<code>new String(..)</code>, <code>new Boolean(..)</code>, or <code>new Number(..)</code>, respectively). This is often referred to as "boxing".</p>
<p><strong>Note:</strong> With respect to <code>this</code> binding, <code>call(..)</code> and <code>apply(..)</code> are identical. They <em>do</em> behave differently with their additional parameters, but that's not something we care about presently.</p>
<p>Unfortunately, <em>explicit binding</em> alone still doesn't offer any solution to the issue mentioned previously, of a function "losing" its intended <code>this</code> binding, or just having it paved over by a framework, etc.</p>
<h4><a id="user-content-hard-binding" class="anchor" aria-hidden="true" href="#hard-binding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hard Binding</h4>
<p>But a variation pattern around <em>explicit binding</em> actually does the trick. Consider:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>
};

<span class="pl-k">var</span> <span class="pl-en">bar</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {
	<span class="pl-smi">foo</span>.<span class="pl-c1">call</span>( obj );
};

<span class="pl-en">bar</span>(); <span class="pl-c"><span class="pl-c">//</span> 2</span>
<span class="pl-c1">setTimeout</span>( bar, <span class="pl-c1">100</span> ); <span class="pl-c"><span class="pl-c">//</span> 2</span>

<span class="pl-c"><span class="pl-c">//</span> `bar` hard binds `foo`'s `this` to `obj`</span>
<span class="pl-c"><span class="pl-c">//</span> so that it cannot be overriden</span>
<span class="pl-smi">bar</span>.<span class="pl-c1">call</span>( <span class="pl-c1">window</span> ); <span class="pl-c"><span class="pl-c">//</span> 2</span></pre></div>
<p>Let's examine how this variation works. We create a function <code>bar()</code> which, internally, manually calls <code>foo.call(obj)</code>, thereby forcibly invoking <code>foo</code> with <code>obj</code> binding for <code>this</code>. No matter how you later invoke the function <code>bar</code>, it will always manually invoke <code>foo</code> with <code>obj</code>. This binding is both explicit and strong, so we call it <em>hard binding</em>.</p>
<p>The most typical way to wrap a function with a <em>hard binding</em> creates a pass-thru of any arguments passed and any return value received:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">something</span>) {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span>, something );
	<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">a</span> <span class="pl-k">+</span> something;
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>
};

<span class="pl-k">var</span> <span class="pl-en">bar</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {
	<span class="pl-k">return</span> <span class="pl-smi">foo</span>.<span class="pl-c1">apply</span>( obj, <span class="pl-c1">arguments</span> );
};

<span class="pl-k">var</span> b <span class="pl-k">=</span> <span class="pl-en">bar</span>( <span class="pl-c1">3</span> ); <span class="pl-c"><span class="pl-c">//</span> 2 3</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( b ); <span class="pl-c"><span class="pl-c">//</span> 5</span></pre></div>
<p>Another way to express this pattern is to create a re-usable helper:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">something</span>) {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span>, something );
	<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">a</span> <span class="pl-k">+</span> something;
}

<span class="pl-c"><span class="pl-c">//</span> simple `bind` helper</span>
<span class="pl-k">function</span> <span class="pl-en">bind</span>(<span class="pl-smi">fn</span>, <span class="pl-smi">obj</span>) {
	<span class="pl-k">return</span> <span class="pl-k">function</span>() {
		<span class="pl-k">return</span> <span class="pl-smi">fn</span>.<span class="pl-c1">apply</span>( obj, <span class="pl-c1">arguments</span> );
	};
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>
};

<span class="pl-k">var</span> bar <span class="pl-k">=</span> <span class="pl-en">bind</span>( foo, obj );

<span class="pl-k">var</span> b <span class="pl-k">=</span> <span class="pl-en">bar</span>( <span class="pl-c1">3</span> ); <span class="pl-c"><span class="pl-c">//</span> 2 3</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( b ); <span class="pl-c"><span class="pl-c">//</span> 5</span></pre></div>
<p>Since <em>hard binding</em> is such a common pattern, it's provided with a built-in utility as of ES5: <code>Function.prototype.bind</code>, and it's used like this:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">something</span>) {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span>, something );
	<span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">a</span> <span class="pl-k">+</span> something;
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>
};

<span class="pl-k">var</span> bar <span class="pl-k">=</span> <span class="pl-smi">foo</span>.<span class="pl-en">bind</span>( obj );

<span class="pl-k">var</span> b <span class="pl-k">=</span> <span class="pl-en">bar</span>( <span class="pl-c1">3</span> ); <span class="pl-c"><span class="pl-c">//</span> 2 3</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( b ); <span class="pl-c"><span class="pl-c">//</span> 5</span></pre></div>
<p><code>bind(..)</code> returns a new function that is hard-coded to call the original function with the <code>this</code> context set as you specified.</p>
<p><strong>Note:</strong> As of ES6, the hard-bound function produced by <code>bind(..)</code> has a <code>.name</code> property that derives from the original <em>target function</em>. For example: <code>bar = foo.bind(..)</code> should have a <code>bar.name</code> value of <code>"bound foo"</code>, which is the function call name that should show up in a stack trace.</p>
<h4><a id="user-content-api-call-contexts" class="anchor" aria-hidden="true" href="#api-call-contexts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API Call "Contexts"</h4>
<p>Many libraries' functions, and indeed many new built-in functions in the JavaScript language and host environment, provide an optional parameter, usually called "context", which is designed as a work-around for you not having to use <code>bind(..)</code> to ensure your callback function uses a particular <code>this</code>.</p>
<p>For instance:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">el</span>) {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( el, <span class="pl-c1">this</span>.<span class="pl-c1">id</span> );
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	id<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>awesome<span class="pl-pds">"</span></span>
};

<span class="pl-c"><span class="pl-c">//</span> use `obj` as `this` for `foo(..)` calls</span>
[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>].<span class="pl-c1">forEach</span>( foo, obj ); <span class="pl-c"><span class="pl-c">//</span> 1 awesome  2 awesome  3 awesome</span></pre></div>
<p>Internally, these various functions almost certainly use <em>explicit binding</em> via <code>call(..)</code> or <code>apply(..)</code>, saving you the trouble.</p>
<h3><a id="user-content-new-binding" class="anchor" aria-hidden="true" href="#new-binding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>new</code> Binding</h3>
<p>The fourth and final rule for <code>this</code> binding requires us to re-think a very common misconception about functions and objects in JavaScript.</p>
<p>In traditional class-oriented languages, "constructors" are special methods attached to classes, that when the class is instantiated with a <code>new</code> operator, the constructor of that class is called. This usually looks something like:</p>
<div class="highlight highlight-source-js"><pre>something <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">MyClass</span>(..);</pre></div>
<p>JavaScript has a <code>new</code> operator, and the code pattern to use it looks basically identical to what we see in those class-oriented languages; most developers assume that JavaScript's mechanism is doing something similar. However, there really is <em>no connection</em> to class-oriented functionality implied by <code>new</code> usage in JS.</p>
<p>First, let's re-define what a "constructor" in JavaScript is. In JS, constructors are <strong>just functions</strong> that happen to be called with the <code>new</code> operator in front of them. They are not attached to classes, nor are they instantiating a class. They are not even special types of functions. They're just regular functions that are, in essence, hijacked by the use of <code>new</code> in their invocation.</p>
<p>For example, the <code>Number(..)</code> function acting as a constructor, quoting from the ES5.1 spec:</p>
<blockquote>
<p>15.7.2 The Number Constructor</p>
<p>When Number is called as part of a new expression it is a constructor: it initialises the newly created object.</p>
</blockquote>
<p>So, pretty much any ol' function, including the built-in object functions like <code>Number(..)</code> (see Chapter 3) can be called with <code>new</code> in front of it, and that makes that function call a <em>constructor call</em>. This is an important but subtle distinction: there's really no such thing as "constructor functions", but rather construction calls <em>of</em> functions.</p>
<p>When a function is invoked with <code>new</code> in front of it, otherwise known as a constructor call, the following things are done automatically:</p>
<ol>
<li>a brand new object is created (aka, constructed) out of thin air</li>
<li><em>the newly constructed object is <code>[[Prototype]]</code>-linked</em></li>
<li>the newly constructed object is set as the <code>this</code> binding for that function call</li>
<li>unless the function returns its own alternate <strong>object</strong>, the <code>new</code>-invoked function call will <em>automatically</em> return the newly constructed object.</li>
</ol>
<p>Steps 1, 3, and 4 apply to our current discussion. We'll skip over step 2 for now and come back to it in Chapter 5.</p>
<p>Consider this code:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">a</span>) {
	<span class="pl-c1">this</span>.<span class="pl-smi">a</span> <span class="pl-k">=</span> a;
}

<span class="pl-k">var</span> bar <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">foo</span>( <span class="pl-c1">2</span> );
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-smi">bar</span>.<span class="pl-smi">a</span> ); <span class="pl-c"><span class="pl-c">//</span> 2</span></pre></div>
<p>By calling <code>foo(..)</code> with <code>new</code> in front of it, we've constructed a new object and set that new object as the <code>this</code> for the call of <code>foo(..)</code>. <strong>So <code>new</code> is the final way that a function call's <code>this</code> can be bound.</strong> We'll call this <em>new binding</em>.</p>
<h2><a id="user-content-everything-in-order" class="anchor" aria-hidden="true" href="#everything-in-order"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Everything In Order</h2>
<p>So, now we've uncovered the 4 rules for binding <code>this</code> in function calls. <em>All</em> you need to do is find the call-site and inspect it to see which rule applies. But, what if the call-site has multiple eligible rules? There must be an order of precedence to these rules, and so we will next demonstrate what order to apply the rules.</p>
<p>It should be clear that the <em>default binding</em> is the lowest priority rule of the 4. So we'll just set that one aside.</p>
<p>Which is more precedent, <em>implicit binding</em> or <em>explicit binding</em>? Let's test it:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> obj1 <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>,
	foo<span class="pl-k">:</span> foo
};

<span class="pl-k">var</span> obj2 <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">3</span>,
	foo<span class="pl-k">:</span> foo
};

<span class="pl-smi">obj1</span>.<span class="pl-en">foo</span>(); <span class="pl-c"><span class="pl-c">//</span> 2</span>
<span class="pl-smi">obj2</span>.<span class="pl-en">foo</span>(); <span class="pl-c"><span class="pl-c">//</span> 3</span>

<span class="pl-smi">obj1</span>.<span class="pl-smi">foo</span>.<span class="pl-c1">call</span>( obj2 ); <span class="pl-c"><span class="pl-c">//</span> 3</span>
<span class="pl-smi">obj2</span>.<span class="pl-smi">foo</span>.<span class="pl-c1">call</span>( obj1 ); <span class="pl-c"><span class="pl-c">//</span> 2</span></pre></div>
<p>So, <em>explicit binding</em> takes precedence over <em>implicit binding</em>, which means you should ask <strong>first</strong> if <em>explicit binding</em> applies before checking for <em>implicit binding</em>.</p>
<p>Now, we just need to figure out where <em>new binding</em> fits in the precedence.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">something</span>) {
	<span class="pl-c1">this</span>.<span class="pl-smi">a</span> <span class="pl-k">=</span> something;
}

<span class="pl-k">var</span> obj1 <span class="pl-k">=</span> {
	foo<span class="pl-k">:</span> foo
};

<span class="pl-k">var</span> obj2 <span class="pl-k">=</span> {};

<span class="pl-smi">obj1</span>.<span class="pl-en">foo</span>( <span class="pl-c1">2</span> );
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-smi">obj1</span>.<span class="pl-smi">a</span> ); <span class="pl-c"><span class="pl-c">//</span> 2</span>

<span class="pl-smi">obj1</span>.<span class="pl-smi">foo</span>.<span class="pl-c1">call</span>( obj2, <span class="pl-c1">3</span> );
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-smi">obj2</span>.<span class="pl-smi">a</span> ); <span class="pl-c"><span class="pl-c">//</span> 3</span>

<span class="pl-k">var</span> bar <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">obj1.foo</span>( <span class="pl-c1">4</span> );
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-smi">obj1</span>.<span class="pl-smi">a</span> ); <span class="pl-c"><span class="pl-c">//</span> 2</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-smi">bar</span>.<span class="pl-smi">a</span> ); <span class="pl-c"><span class="pl-c">//</span> 4</span></pre></div>
<p>OK, <em>new binding</em> is more precedent than <em>implicit binding</em>. But do you think <em>new binding</em> is more or less precedent than <em>explicit binding</em>?</p>
<p><strong>Note:</strong> <code>new</code> and <code>call</code>/<code>apply</code> cannot be used together, so <code>new foo.call(obj1)</code> is not allowed, to test <em>new binding</em> directly against <em>explicit binding</em>. But we can still use a <em>hard binding</em> to test the precedence of the two rules.</p>
<p>Before we explore that in a code listing, think back to how <em>hard binding</em> physically works, which is that <code>Function.prototype.bind(..)</code> creates a new wrapper function that is hard-coded to ignore its own <code>this</code> binding (whatever it may be), and use a manual one we provide.</p>
<p>By that reasoning, it would seem obvious to assume that <em>hard binding</em> (which is a form of <em>explicit binding</em>) is more precedent than <em>new binding</em>, and thus cannot be overridden with <code>new</code>.</p>
<p>Let's check:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">something</span>) {
	<span class="pl-c1">this</span>.<span class="pl-smi">a</span> <span class="pl-k">=</span> something;
}

<span class="pl-k">var</span> obj1 <span class="pl-k">=</span> {};

<span class="pl-k">var</span> bar <span class="pl-k">=</span> <span class="pl-smi">foo</span>.<span class="pl-en">bind</span>( obj1 );
<span class="pl-en">bar</span>( <span class="pl-c1">2</span> );
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-smi">obj1</span>.<span class="pl-smi">a</span> ); <span class="pl-c"><span class="pl-c">//</span> 2</span>

<span class="pl-k">var</span> baz <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">bar</span>( <span class="pl-c1">3</span> );
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-smi">obj1</span>.<span class="pl-smi">a</span> ); <span class="pl-c"><span class="pl-c">//</span> 2</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-smi">baz</span>.<span class="pl-smi">a</span> ); <span class="pl-c"><span class="pl-c">//</span> 3</span></pre></div>
<p>Whoa! <code>bar</code> is hard-bound against <code>obj1</code>, but <code>new bar(3)</code> did <strong>not</strong> change <code>obj1.a</code> to be <code>3</code> as we would have expected. Instead, the <em>hard bound</em> (to <code>obj1</code>) call to <code>bar(..)</code> <em><strong>is</strong></em> able to be overridden with <code>new</code>. Since <code>new</code> was applied, we got the newly created object back, which we named <code>baz</code>, and we see in fact that  <code>baz.a</code> has the value <code>3</code>.</p>
<p>This should be surprising if you go back to our "fake" bind helper:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">bind</span>(<span class="pl-smi">fn</span>, <span class="pl-smi">obj</span>) {
	<span class="pl-k">return</span> <span class="pl-k">function</span>() {
		<span class="pl-smi">fn</span>.<span class="pl-c1">apply</span>( obj, <span class="pl-c1">arguments</span> );
	};
}</pre></div>
<p>If you reason about how the helper's code works, it does not have a way for a <code>new</code> operator call to override the hard-binding to <code>obj</code> as we just observed.</p>
<p>But the built-in <code>Function.prototype.bind(..)</code> as of ES5 is more sophisticated, quite a bit so in fact. Here is the (slightly reformatted) polyfill provided by the MDN page for <code>bind(..)</code>:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">bind</span>) {
	<span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bind</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">oThis</span>) {
		<span class="pl-k">if</span> (<span class="pl-k">typeof</span> <span class="pl-c1">this</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">"</span>function<span class="pl-pds">"</span></span>) {
			<span class="pl-c"><span class="pl-c">//</span> closest thing possible to the ECMAScript 5</span>
			<span class="pl-c"><span class="pl-c">//</span> internal IsCallable function</span>
			<span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">TypeError</span>( <span class="pl-s"><span class="pl-pds">"</span>Function.prototype.bind - what <span class="pl-pds">"</span></span> <span class="pl-k">+</span>
				<span class="pl-s"><span class="pl-pds">"</span>is trying to be bound is not callable<span class="pl-pds">"</span></span>
			);
		}

		<span class="pl-k">var</span> aArgs <span class="pl-k">=</span> <span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>( <span class="pl-c1">arguments</span>, <span class="pl-c1">1</span> ),
			fToBind <span class="pl-k">=</span> <span class="pl-c1">this</span>,
			<span class="pl-en">fNOP</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(){},
			<span class="pl-en">fBound</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(){
				<span class="pl-k">return</span> <span class="pl-smi">fToBind</span>.<span class="pl-c1">apply</span>(
					(
						<span class="pl-c1">this</span> <span class="pl-k">instanceof</span> fNOP <span class="pl-k">&amp;&amp;</span>
						oThis <span class="pl-k">?</span> <span class="pl-c1">this</span> <span class="pl-k">:</span> oThis
					),
					<span class="pl-smi">aArgs</span>.<span class="pl-c1">concat</span>( <span class="pl-c1">Array</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>( <span class="pl-c1">arguments</span> ) )
				);
			}
		;

		<span class="pl-smi">fNOP</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-c1">prototype</span>;
		<span class="pl-smi">fBound</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">fNOP</span>();

		<span class="pl-k">return</span> fBound;
	};
}</pre></div>
<p><strong>Note:</strong> The <code>bind(..)</code> polyfill shown above differs from the built-in <code>bind(..)</code> in ES5 with respect to hard-bound functions that will be used with <code>new</code> (see below for why that's useful). Because the polyfill cannot create a function without a <code>.prototype</code> as the built-in utility does, there's some nuanced indirection to approximate the same behavior. Tread carefully if you plan to use <code>new</code> with a hard-bound function and you rely on this polyfill.</p>
<p>The part that's allowing <code>new</code> overriding is:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c1">this</span> <span class="pl-k">instanceof</span> fNOP <span class="pl-k">&amp;&amp;</span>
oThis <span class="pl-k">?</span> <span class="pl-c1">this</span> <span class="pl-k">:</span> oThis

<span class="pl-c"><span class="pl-c">//</span> ... and:</span>

<span class="pl-smi">fNOP</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> <span class="pl-c1">this</span>.<span class="pl-c1">prototype</span>;
<span class="pl-smi">fBound</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">fNOP</span>();</pre></div>
<p>We won't actually dive into explaining how this trickery works (it's complicated and beyond our scope here), but essentially the utility determines whether or not the hard-bound function has been called with <code>new</code> (resulting in a newly constructed object being its <code>this</code>), and if so, it uses <em>that</em> newly created <code>this</code> rather than the previously specified <em>hard binding</em> for <code>this</code>.</p>
<p>Why is <code>new</code> being able to override <em>hard binding</em> useful?</p>
<p>The primary reason for this behavior is to create a function (that can be used with <code>new</code> for constructing objects) that essentially ignores the <code>this</code> <em>hard binding</em> but which presets some or all of the function's arguments. One of the capabilities of <code>bind(..)</code> is that any arguments passed after the first <code>this</code> binding argument are defaulted as standard arguments to the underlying function (technically called "partial application", which is a subset of "currying").</p>
<p>For example:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">p1</span>,<span class="pl-smi">p2</span>) {
	<span class="pl-c1">this</span>.<span class="pl-smi">val</span> <span class="pl-k">=</span> p1 <span class="pl-k">+</span> p2;
}

<span class="pl-c"><span class="pl-c">//</span> using `null` here because we don't care about</span>
<span class="pl-c"><span class="pl-c">//</span> the `this` hard-binding in this scenario, and</span>
<span class="pl-c"><span class="pl-c">//</span> it will be overridden by the `new` call anyway!</span>
<span class="pl-k">var</span> bar <span class="pl-k">=</span> <span class="pl-smi">foo</span>.<span class="pl-en">bind</span>( <span class="pl-c1">null</span>, <span class="pl-s"><span class="pl-pds">"</span>p1<span class="pl-pds">"</span></span> );

<span class="pl-k">var</span> baz <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">bar</span>( <span class="pl-s"><span class="pl-pds">"</span>p2<span class="pl-pds">"</span></span> );

<span class="pl-smi">baz</span>.<span class="pl-smi">val</span>; <span class="pl-c"><span class="pl-c">//</span> p1p2</span></pre></div>
<h3><a id="user-content-determining-this" class="anchor" aria-hidden="true" href="#determining-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Determining <code>this</code></h3>
<p>Now, we can summarize the rules for determining <code>this</code> from a function call's call-site, in their order of precedence. Ask these questions in this order, and stop when the first rule applies.</p>
<ol>
<li>
<p>Is the function called with <code>new</code> (<strong>new binding</strong>)? If so, <code>this</code> is the newly constructed object.</p>
<p><code>var bar = new foo()</code></p>
</li>
<li>
<p>Is the function called with <code>call</code> or <code>apply</code> (<strong>explicit binding</strong>), even hidden inside a <code>bind</code> <em>hard binding</em>? If so, <code>this</code> is the explicitly specified object.</p>
<p><code>var bar = foo.call( obj2 )</code></p>
</li>
<li>
<p>Is the function called with a context (<strong>implicit binding</strong>), otherwise known as an owning or containing object? If so, <code>this</code> is <em>that</em> context object.</p>
<p><code>var bar = obj1.foo()</code></p>
</li>
<li>
<p>Otherwise, default the <code>this</code> (<strong>default binding</strong>). If in <code>strict mode</code>, pick <code>undefined</code>, otherwise pick the <code>global</code> object.</p>
<p><code>var bar = foo()</code></p>
</li>
</ol>
<p>That's it. That's <em>all it takes</em> to understand the rules of <code>this</code> binding for normal function calls. Well... almost.</p>
<h2><a id="user-content-binding-exceptions" class="anchor" aria-hidden="true" href="#binding-exceptions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Binding Exceptions</h2>
<p>As usual, there are some <em>exceptions</em> to the "rules".</p>
<p>The <code>this</code>-binding behavior can in some scenarios be surprising, where you intended a different binding but you end up with binding behavior from the <em>default binding</em> rule (see previous).</p>
<h3><a id="user-content-ignored-this" class="anchor" aria-hidden="true" href="#ignored-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ignored <code>this</code></h3>
<p>If you pass <code>null</code> or <code>undefined</code> as a <code>this</code> binding parameter to <code>call</code>, <code>apply</code>, or <code>bind</code>, those values are effectively ignored, and instead the <em>default binding</em> rule applies to the invocation.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> a <span class="pl-k">=</span> <span class="pl-c1">2</span>;

<span class="pl-smi">foo</span>.<span class="pl-c1">call</span>( <span class="pl-c1">null</span> ); <span class="pl-c"><span class="pl-c">//</span> 2</span></pre></div>
<p>Why would you intentionally pass something like <code>null</code> for a <code>this</code> binding?</p>
<p>It's quite common to use <code>apply(..)</code> for spreading out arrays of values as parameters to a function call. Similarly, <code>bind(..)</code> can curry parameters (pre-set values), which can be very helpful.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>) {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-s"><span class="pl-pds">"</span>a:<span class="pl-pds">"</span></span> <span class="pl-k">+</span> a <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>, b:<span class="pl-pds">"</span></span> <span class="pl-k">+</span> b );
}

<span class="pl-c"><span class="pl-c">//</span> spreading out array as parameters</span>
<span class="pl-smi">foo</span>.<span class="pl-c1">apply</span>( <span class="pl-c1">null</span>, [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>] ); <span class="pl-c"><span class="pl-c">//</span> a:2, b:3</span>

<span class="pl-c"><span class="pl-c">//</span> currying with `bind(..)`</span>
<span class="pl-k">var</span> bar <span class="pl-k">=</span> <span class="pl-smi">foo</span>.<span class="pl-en">bind</span>( <span class="pl-c1">null</span>, <span class="pl-c1">2</span> );
<span class="pl-en">bar</span>( <span class="pl-c1">3</span> ); <span class="pl-c"><span class="pl-c">//</span> a:2, b:3</span></pre></div>
<p>Both these utilities require a <code>this</code> binding for the first parameter. If the functions in question don't care about <code>this</code>, you need a placeholder value, and <code>null</code> might seem like a reasonable choice as shown in this snippet.</p>
<p><strong>Note:</strong> We don't cover it in this book, but ES6 has the <code>...</code> spread operator which will let you syntactically "spread out" an array as parameters without needing <code>apply(..)</code>, such as <code>foo(...[1,2])</code>, which amounts to <code>foo(1,2)</code> -- syntactically avoiding a <code>this</code> binding if it's unnecessary. Unfortunately, there's no ES6 syntactic substitute for currying, so the <code>this</code> parameter of the <code>bind(..)</code> call still needs attention.</p>
<p>However, there's a slight hidden "danger" in always using <code>null</code> when you don't care about the <code>this</code> binding. If you ever use that against a function call (for instance, a third-party library function that you don't control), and that function <em>does</em> make a <code>this</code> reference, the <em>default binding</em> rule means it might inadvertently reference (or worse, mutate!) the <code>global</code> object (<code>window</code> in the browser).</p>
<p>Obviously, such a pitfall can lead to a variety of <em>very difficult</em> to diagnose/track-down bugs.</p>
<h4><a id="user-content-safer-this" class="anchor" aria-hidden="true" href="#safer-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Safer <code>this</code></h4>
<p>Perhaps a somewhat "safer" practice is to pass a specifically set up object for <code>this</code> which is guaranteed not to be an object that can create problematic side effects in your program. Borrowing terminology from networking (and the military), we can create a "DMZ" (de-militarized zone) object -- nothing more special than a completely empty, non-delegated (see Chapters 5 and 6) object.</p>
<p>If we always pass a DMZ object for ignored <code>this</code> bindings we don't think we need to care about, we're sure any hidden/unexpected usage of <code>this</code> will be restricted to the empty object, which insulates our program's <code>global</code> object from side-effects.</p>
<p>Since this object is totally empty, I personally like to give it the variable name <code>ø</code> (the lowercase mathematical symbol for the empty set). On many keyboards (like US-layout on Mac), this symbol is easily typed with <code>⌥</code>+<code>o</code> (option+<code>o</code>). Some systems also let you set up hotkeys for specific symbols. If you don't like the <code>ø</code> symbol, or your keyboard doesn't make that as easy to type, you can of course call it whatever you want.</p>
<p>Whatever you call it, the easiest way to set it up as <strong>totally empty</strong> is <code>Object.create(null)</code> (see Chapter 5). <code>Object.create(null)</code> is similar to <code>{ }</code>, but without the delegation to <code>Object.prototype</code>, so it's "more empty" than just <code>{ }</code>.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(<span class="pl-smi">a</span>,<span class="pl-smi">b</span>) {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-s"><span class="pl-pds">"</span>a:<span class="pl-pds">"</span></span> <span class="pl-k">+</span> a <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>, b:<span class="pl-pds">"</span></span> <span class="pl-k">+</span> b );
}

<span class="pl-c"><span class="pl-c">//</span> our DMZ empty object</span>
<span class="pl-k">var</span> ø <span class="pl-k">=</span> <span class="pl-c1">Object</span>.<span class="pl-en">create</span>( <span class="pl-c1">null</span> );

<span class="pl-c"><span class="pl-c">//</span> spreading out array as parameters</span>
<span class="pl-smi">foo</span>.<span class="pl-c1">apply</span>( ø, [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>] ); <span class="pl-c"><span class="pl-c">//</span> a:2, b:3</span>

<span class="pl-c"><span class="pl-c">//</span> currying with `bind(..)`</span>
<span class="pl-k">var</span> bar <span class="pl-k">=</span> <span class="pl-smi">foo</span>.<span class="pl-en">bind</span>( ø, <span class="pl-c1">2</span> );
<span class="pl-en">bar</span>( <span class="pl-c1">3</span> ); <span class="pl-c"><span class="pl-c">//</span> a:2, b:3</span></pre></div>
<p>Not only functionally "safer", there's a sort of stylistic benefit to <code>ø</code>, in that it semantically conveys "I want the <code>this</code> to be empty" a little more clearly than <code>null</code> might. But again, name your DMZ object whatever you prefer.</p>
<h3><a id="user-content-indirection" class="anchor" aria-hidden="true" href="#indirection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Indirection</h3>
<p>Another thing to be aware of is you can (intentionally or not!) create "indirect references" to functions, and in those cases,  when that function reference is invoked, the <em>default binding</em> rule also applies.</p>
<p>One of the most common ways that <em>indirect references</em> occur is from an assignment:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
}

<span class="pl-k">var</span> a <span class="pl-k">=</span> <span class="pl-c1">2</span>;
<span class="pl-k">var</span> o <span class="pl-k">=</span> { a<span class="pl-k">:</span> <span class="pl-c1">3</span>, foo<span class="pl-k">:</span> foo };
<span class="pl-k">var</span> p <span class="pl-k">=</span> { a<span class="pl-k">:</span> <span class="pl-c1">4</span> };

<span class="pl-smi">o</span>.<span class="pl-en">foo</span>(); <span class="pl-c"><span class="pl-c">//</span> 3</span>
(<span class="pl-smi">p</span>.<span class="pl-smi">foo</span> <span class="pl-k">=</span> <span class="pl-smi">o</span>.<span class="pl-smi">foo</span>)(); <span class="pl-c"><span class="pl-c">//</span> 2</span></pre></div>
<p>The <em>result value</em> of the assignment expression <code>p.foo = o.foo</code> is a reference to just the underlying function object. As such, the effective call-site is just <code>foo()</code>, not <code>p.foo()</code> or <code>o.foo()</code> as you might expect. Per the rules above, the <em>default binding</em> rule applies.</p>
<p>Reminder: regardless of how you get to a function invocation using the <em>default binding</em> rule, the <code>strict mode</code> status of the <strong>contents</strong> of the invoked function making the <code>this</code> reference -- not the function call-site -- determines the <em>default binding</em> value: either the <code>global</code> object if in non-<code>strict mode</code> or <code>undefined</code> if in <code>strict mode</code>.</p>
<h3><a id="user-content-softening-binding" class="anchor" aria-hidden="true" href="#softening-binding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Softening Binding</h3>
<p>We saw earlier that <em>hard binding</em> was one strategy for preventing a function call falling back to the <em>default binding</em> rule inadvertently, by forcing it to be bound to a specific <code>this</code> (unless you use <code>new</code> to override it!). The problem is, <em>hard-binding</em> greatly reduces the flexibility of a function, preventing manual <code>this</code> override with either the <em>implicit binding</em> or even subsequent <em>explicit binding</em> attempts.</p>
<p>It would be nice if there was a way to provide a different default for <em>default binding</em> (not <code>global</code> or <code>undefined</code>), while still leaving the function able to be manually <code>this</code> bound via <em>implicit binding</em> or <em>explicit binding</em> techniques.</p>
<p>We can construct a so-called <em>soft binding</em> utility which emulates our desired behavior.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">softBind</span>) {
	<span class="pl-c1">Function</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">softBind</span> <span class="pl-k">=</span> <span class="pl-k">function</span>(<span class="pl-smi">obj</span>) {
		<span class="pl-k">var</span> fn <span class="pl-k">=</span> <span class="pl-c1">this</span>,
			curried <span class="pl-k">=</span> [].<span class="pl-smi">slice</span>.<span class="pl-c1">call</span>( <span class="pl-c1">arguments</span>, <span class="pl-c1">1</span> ),
			<span class="pl-en">bound</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">bound</span>() {
				<span class="pl-k">return</span> <span class="pl-smi">fn</span>.<span class="pl-c1">apply</span>(
					(<span class="pl-k">!</span><span class="pl-c1">this</span> <span class="pl-k">||</span>
						(<span class="pl-k">typeof</span> <span class="pl-c1">window</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">"</span>undefined<span class="pl-pds">"</span></span> <span class="pl-k">&amp;&amp;</span>
							<span class="pl-c1">this</span> <span class="pl-k">===</span> <span class="pl-c1">window</span>) <span class="pl-k">||</span>
						(<span class="pl-k">typeof</span> <span class="pl-c1">global</span> <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">"</span>undefined<span class="pl-pds">"</span></span> <span class="pl-k">&amp;&amp;</span>
							<span class="pl-c1">this</span> <span class="pl-k">===</span> <span class="pl-c1">global</span>)
					) <span class="pl-k">?</span> obj <span class="pl-k">:</span> <span class="pl-c1">this</span>,
					<span class="pl-smi">curried</span>.<span class="pl-smi">concat</span>.<span class="pl-c1">apply</span>( curried, <span class="pl-c1">arguments</span> )
				);
			};
		<span class="pl-smi">bound</span>.<span class="pl-c1">prototype</span> <span class="pl-k">=</span> <span class="pl-c1">Object</span>.<span class="pl-en">create</span>( <span class="pl-smi">fn</span>.<span class="pl-c1">prototype</span> );
		<span class="pl-k">return</span> bound;
	};
}</pre></div>
<p>The <code>softBind(..)</code> utility provided here works similarly to the built-in ES5 <code>bind(..)</code> utility, except with our <em>soft binding</em> behavior. It wraps the specified function in logic that checks the <code>this</code> at call-time and if it's <code>global</code> or <code>undefined</code>, uses a pre-specified alternate <em>default</em> (<code>obj</code>). Otherwise the <code>this</code> is left untouched. It also provides optional currying (see the <code>bind(..)</code> discussion earlier).</p>
<p>Let's demonstrate its usage:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
   <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>name: <span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-c1">this</span>.<span class="pl-c1">name</span>);
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>obj<span class="pl-pds">"</span></span> },
    obj2 <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>obj2<span class="pl-pds">"</span></span> },
    obj3 <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>obj3<span class="pl-pds">"</span></span> };

<span class="pl-k">var</span> fooOBJ <span class="pl-k">=</span> <span class="pl-smi">foo</span>.<span class="pl-en">softBind</span>( obj );

<span class="pl-en">fooOBJ</span>(); <span class="pl-c"><span class="pl-c">//</span> name: obj</span>

<span class="pl-smi">obj2</span>.<span class="pl-smi">foo</span> <span class="pl-k">=</span> <span class="pl-smi">foo</span>.<span class="pl-en">softBind</span>(obj);
<span class="pl-smi">obj2</span>.<span class="pl-en">foo</span>(); <span class="pl-c"><span class="pl-c">//</span> name: obj2   &lt;---- look!!!</span>

<span class="pl-smi">fooOBJ</span>.<span class="pl-c1">call</span>( obj3 ); <span class="pl-c"><span class="pl-c">//</span> name: obj3   &lt;---- look!</span>

<span class="pl-c1">setTimeout</span>( <span class="pl-smi">obj2</span>.<span class="pl-smi">foo</span>, <span class="pl-c1">10</span> ); <span class="pl-c"><span class="pl-c">//</span> name: obj   &lt;---- falls back to soft-binding</span></pre></div>
<p>The soft-bound version of the <code>foo()</code> function can be manually <code>this</code>-bound to <code>obj2</code> or <code>obj3</code> as shown, but it falls back to <code>obj</code> if the <em>default binding</em> would otherwise apply.</p>
<h2><a id="user-content-lexical-this" class="anchor" aria-hidden="true" href="#lexical-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lexical <code>this</code></h2>
<p>Normal functions abide by the 4 rules we just covered. But ES6 introduces a special kind of function that does not use these rules: arrow-function.</p>
<p>Arrow-functions are signified not by the <code>function</code> keyword, but by the <code>=&gt;</code> so called "fat arrow" operator. Instead of using the four standard <code>this</code> rules, arrow-functions adopt the <code>this</code> binding from the enclosing (function or global) scope.</p>
<p>Let's illustrate arrow-function lexical scope:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-c"><span class="pl-c">//</span> return an arrow function</span>
	<span class="pl-k">return</span> (<span class="pl-smi">a</span>) <span class="pl-k">=&gt;</span> {
		<span class="pl-c"><span class="pl-c">//</span> `this` here is lexically adopted from `foo()`</span>
		<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
	};
}

<span class="pl-k">var</span> obj1 <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>
};

<span class="pl-k">var</span> obj2 <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">3</span>
};

<span class="pl-k">var</span> bar <span class="pl-k">=</span> <span class="pl-smi">foo</span>.<span class="pl-c1">call</span>( obj1 );
<span class="pl-smi">bar</span>.<span class="pl-c1">call</span>( obj2 ); <span class="pl-c"><span class="pl-c">//</span> 2, not 3!</span></pre></div>
<p>The arrow-function created in <code>foo()</code> lexically captures whatever <code>foo()</code>s <code>this</code> is at its call-time. Since <code>foo()</code> was <code>this</code>-bound to <code>obj1</code>, <code>bar</code> (a reference to the returned arrow-function) will also be <code>this</code>-bound to <code>obj1</code>. The lexical binding of an arrow-function cannot be overridden (even with <code>new</code>!).</p>
<p>The most common use-case will likely be in the use of callbacks, such as event handlers or timers:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-c1">setTimeout</span>(() <span class="pl-k">=&gt;</span> {
		<span class="pl-c"><span class="pl-c">//</span> `this` here is lexically adopted from `foo()`</span>
		<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-c1">this</span>.<span class="pl-smi">a</span> );
	},<span class="pl-c1">100</span>);
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>
};

<span class="pl-smi">foo</span>.<span class="pl-c1">call</span>( obj ); <span class="pl-c"><span class="pl-c">//</span> 2</span></pre></div>
<p>While arrow-functions provide an alternative to using <code>bind(..)</code> on a function to ensure its <code>this</code>, which can seem attractive, it's important to note that they essentially are disabling the traditional <code>this</code> mechanism in favor of more widely-understood lexical scoping. Pre-ES6, we already have a fairly common pattern for doing so, which is basically almost indistinguishable from the spirit of ES6 arrow-functions:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>() {
	<span class="pl-k">var</span> self <span class="pl-k">=</span> <span class="pl-c1">this</span>; <span class="pl-c"><span class="pl-c">//</span> lexical capture of `this`</span>
	<span class="pl-c1">setTimeout</span>( <span class="pl-k">function</span>(){
		<span class="pl-en">console</span>.<span class="pl-c1">log</span>( <span class="pl-smi">self</span>.<span class="pl-smi">a</span> );
	}, <span class="pl-c1">100</span> );
}

<span class="pl-k">var</span> obj <span class="pl-k">=</span> {
	a<span class="pl-k">:</span> <span class="pl-c1">2</span>
};

<span class="pl-smi">foo</span>.<span class="pl-c1">call</span>( obj ); <span class="pl-c"><span class="pl-c">//</span> 2</span></pre></div>
<p>While <code>self = this</code> and arrow-functions both seem like good "solutions" to not wanting to use <code>bind(..)</code>, they are essentially fleeing from <code>this</code> instead of understanding and embracing it.</p>
<p>If you find yourself writing <code>this</code>-style code, but most or all the time, you defeat the <code>this</code> mechanism with lexical <code>self = this</code> or arrow-function "tricks", perhaps you should either:</p>
<ol>
<li>
<p>Use only lexical scope and forget the false pretense of <code>this</code>-style code.</p>
</li>
<li>
<p>Embrace <code>this</code>-style mechanisms completely, including using <code>bind(..)</code> where necessary, and try to avoid <code>self = this</code> and arrow-function "lexical this" tricks.</p>
</li>
</ol>
<p>A program can effectively use both styles of code (lexical and <code>this</code>), but inside of the same function, and indeed for the same sorts of look-ups, mixing the two mechanisms is usually asking for harder-to-maintain code, and probably working too hard to be clever.</p>
<h2><a id="user-content-review-tldr" class="anchor" aria-hidden="true" href="#review-tldr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Review (TL;DR)</h2>
<p>Determining the <code>this</code> binding for an executing function requires finding the direct call-site of that function. Once examined, four rules can be applied to the call-site, in <em>this</em> order of precedence:</p>
<ol>
<li>
<p>Called with <code>new</code>? Use the newly constructed object.</p>
</li>
<li>
<p>Called with <code>call</code> or <code>apply</code> (or <code>bind</code>)? Use the specified object.</p>
</li>
<li>
<p>Called with a context object owning the call? Use that context object.</p>
</li>
<li>
<p>Default: <code>undefined</code> in <code>strict mode</code>, global object otherwise.</p>
</li>
</ol>
<p>Be careful of accidental/unintentional invoking of the <em>default binding</em> rule. In cases where you want to "safely" ignore a <code>this</code> binding, a "DMZ" object like <code>ø = Object.create(null)</code> is a good placeholder value that protects the <code>global</code> object from unintended side-effects.</p>
<p>Instead of the four standard binding rules, ES6 arrow-functions use lexical scoping for <code>this</code> binding, which means they adopt the <code>this</code> binding (whatever it is) from its enclosing function call. They are essentially a syntactic replacement of <code>self = this</code> in pre-ES6 coding.</p>
</article>
  </div>

  </div>

  <details class="details-reset details-overlay details-overlay-dark">
    <summary data-hotkey="l" aria-label="Jump to line"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast linejump" aria-label="Jump to line">
      <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-jump-to-line-form Box-body d-flex" action="" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
        <input class="form-control flex-auto mr-3 linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
        <button type="submit" class="btn" data-close-dialog>Go</button>
</form>    </details-dialog>
  </details>


  </div>
  <div class="modal-backdrop js-touch-events"></div>
</div>

    </div>
  </div>

  </div>

        
<div class="footer container-lg px-3" role="contentinfo">
  <div class="position-relative d-flex flex-justify-between pt-6 pb-2 mt-6 f6 text-gray border-top border-gray-light ">
    <ul class="list-style-none d-flex flex-wrap ">
      <li class="mr-3">&copy; 2018 <span title="0.15140s from unicorn-548747546d-jgpp5">GitHub</span>, Inc.</li>
        <li class="mr-3"><a data-ga-click="Footer, go to terms, text:terms" href="https://github.com/site/terms">Terms</a></li>
        <li class="mr-3"><a data-ga-click="Footer, go to privacy, text:privacy" href="https://github.com/site/privacy">Privacy</a></li>
        <li class="mr-3"><a href="https://help.github.com/articles/github-security/" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li class="mr-3"><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a data-ga-click="Footer, go to help, text:help" href="https://help.github.com">Help</a></li>
    </ul>

    <a aria-label="Homepage" title="GitHub" class="footer-octicon mr-lg-4" href="https://github.com">
      <svg height="24" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
</a>
   <ul class="list-style-none d-flex flex-wrap ">
        <li class="mr-3"><a data-ga-click="Footer, go to contact, text:contact" href="https://github.com/contact">Contact GitHub</a></li>
        <li class="mr-3"><a href="https://github.com/pricing" data-ga-click="Footer, go to Pricing, text:Pricing">Pricing</a></li>
      <li class="mr-3"><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li class="mr-3"><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
        <li class="mr-3"><a href="https://blog.github.com" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a data-ga-click="Footer, go to about, text:about" href="https://github.com/about">About</a></li>

    </ul>
  </div>
  <div class="d-flex flex-justify-center pb-6">
    <span class="f6 text-gray-light"></span>
  </div>
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"/></svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
    </button>
    You can’t perform that action at this time.
  </div>


    <script crossorigin="anonymous" integrity="sha512-RJ1ufbxsSbKjRCyYvinsPNKvTBvcvvKUvEOJ8g+GjtWI5SuRr+QPBlZcvRDws4H9YwAgdQFcGxfL8UbwEfdI7A==" type="application/javascript" src="https://assets-cdn.github.com/assets/compat-daf14de28fadf1e2bc40d100cb773e2b.js"></script>
    <script crossorigin="anonymous" integrity="sha512-IC5Ai6c7cUBfMx54JUAsIjA7VroipzkizlZ8F6/0efsGGyZStweZV7bX9bxSFL07nUNLfwrKSEysVIijX+CeUw==" type="application/javascript" src="https://assets-cdn.github.com/assets/frameworks-5874e38105ec062c740350eeb96bdd8a.js"></script>
    
    <script crossorigin="anonymous" async="async" integrity="sha512-Y0wWbyMvuM4AncqCZ3JmN2XZmX623PfWR2gZgiD2zI2cCqaCpRQyKEm2eCeDhYx4zHiXIhZQW8XCbXYxfs8ZKA==" type="application/javascript" src="https://assets-cdn.github.com/assets/github-d08b5457fa55c9386abe7ed707d05017.js"></script>
    
    
    
  <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner d-none">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"/></svg>
    <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
  <div class="facebox" id="facebox" style="display:none;">
  <div class="facebox-popup">
    <div class="facebox-content" role="dialog" aria-labelledby="facebox-header" aria-describedby="facebox-description">
    </div>
    <button type="button" class="facebox-close js-facebox-close" aria-label="Close modal">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
    </button>
  </div>
</div>

  <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default text-gray-dark" open>
    <summary aria-haspopup="dialog" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog>
        <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

  <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box box-shadow-large" style="width:360px;">
  </div>
</div>

<div id="hovercard-aria-description" class="sr-only">
  Press h to open a hovercard with more details.
</div>


  </body>
</html>

